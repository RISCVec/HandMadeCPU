package common

import chisel3._
import chisel3.util._

// RISC-V Instructions Define
// RISC-V Instruction width is 32-bit
// 0-6bit: opcode 7bit
// 7-11bit: rd 5bit
// 12-14bit: func3 3bit
// 15-19bit: rs2 5bit
// 20-24bit: rs1 5bit
// 25-31bit: func7 7bit

object Instructions {

    // Load / Store
    val LW      = BitPat("b???????_?????_?????_010_?????_0000011")
    val SW      = BitPat("b???????_?????_?????_010_?????_0100011")

    // Add
    val ADD     = BitPat("b0000000_?????_?????_000_?????_0110011")
    val ADDI    = BitPat("b???????_?????_?????_000_?????_0010011")

    // Sub
    val SUB     = BitPat("b0100000_?????_?????_000_?????_0110011")

    // Logic
    val AND     = BitPat("b0000000_?????_?????_111_?????_0110011")
    val OR      = BitPat("b0000000_?????_?????_110_?????_0110011")
    val XOR     = BitPat("b0000000_?????_?????_100_?????_0110011")
    val ANDI    = BitPat("b???????_?????_?????_111_?????_0010011")
    val ORI     = BitPat("b???????_?????_?????_110_?????_0010011")
    val XORI    = BitPat("b???????_?????_?????_100_?????_0010011")

    // Shift
    val SLL     = BitPat("b0000000_?????_?????_001_?????_0110011")
    val SRL     = BitPat("b0000000_?????_?????_101_?????_0110011")
    val SRA     = BitPat("b0100000_?????_?????_101_?????_0110011")
    val SLLI    = BitPat("b0000000_?????_?????_001_?????_0010011")
    val SRLI    = BitPat("b0000000_?????_?????_101_?????_0010011")
    val SRAI    = BitPat("b0100000_?????_?????_101_?????_0010011")

    // Compare
    val SLT     = BitPat("b0000000_?????_?????_010_?????_0110011")
    val SLTU    = BitPat("b0000000_?????_?????_011_?????_0110011")
    val SLTI    = BitPat("b0000000_?????_?????_010_?????_0010011")
    val SLTIU   = BitPat("b0000000_?????_?????_101_?????_0010011")

    // Cond Branch
    val BEQ     = BitPat("b???????_?????_?????_000_?????_1100011")
    val BNE     = BitPat("b???????_?????_?????_001_?????_1100011")
    val BLT     = BitPat("b???????_?????_?????_100_?????_1100011")
    val BGE     = BitPat("b???????_?????_?????_101_?????_1100011")
    val BLTU    = BitPat("b???????_?????_?????_110_?????_1100011")
    val BGEU    = BitPat("b???????_?????_?????_111_?????_1100011")

    // Jump
    val JAL     = BitPat("b???????_?????_?????_???_?????_1101111")
    val JALR    = BitPat("b???????_?????_?????_000_?????_1101111")

    // Imm Add
    val LUI     = BitPat("b???????_?????_?????_???_?????_0110111")
    val AUIPC   = BitPat("b???????_?????_?????_???_?????_0010111")

    // CSR
    val CSRRW   = BitPat("b???????_?????_?????_001_?????_1110011")
    val CSRRWI  = BitPat("b???????_?????_?????_101_?????_1110011")
    val CSRRS   = BitPat("b???????_?????_?????_010_?????_1110011")
    val CSRRSI  = BitPat("b???????_?????_?????_110_?????_1110011")
    val CSRRC   = BitPat("b???????_?????_?????_011_?????_1110011")
    val CSRRCI  = BitPat("b???????_?????_?????_111_?????_1110011")

    // Exception
    val ECALL   = BitPat("b0000000_00000_00000_000_00000_1110011")

    // Vec
    val VSETVLI = BitPat("b???????_?????_?????_111_?????_1010111")
    val VLE     = BitPat("b0000001_00000_?????_???_?????_0000111")
    val VSE     = BitPat("b0000001_00000_?????_???_?????_0100111")
    val VADDVV  = BitPat("b0000001_?????_?????_000_?????_1010111")

    // User Define
    val PCNT    = BitPat("b0000000_00000_?????_110_?????_0001011")
    
}